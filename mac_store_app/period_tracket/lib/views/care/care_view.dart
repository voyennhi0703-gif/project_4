import 'package:flutter/material.dart';
import 'package:period_tracket/common/colo_extension.dart';

class CareView extends StatefulWidget {
  const CareView({super.key});

  @override
  State<CareView> createState() => _CareViewState();
}

class _CareViewState extends State<CareView> {
  Map<int, bool> completedExercises = {};
  String selectedCategory = "T·∫•t c·∫£";

  final List<String> categories = [
    "T·∫•t c·∫£",
    "Th∆∞ gi√£n",
    "Massage",
    "Yoga",
    "V·∫≠n ƒë·ªông",
    "Tr·ªã li·ªáu",
  ];

  final List<Exercise> exercises = [
    Exercise(
      id: 1,
      title: "Th·ªü s√¢u v√† th∆∞ gi√£n",
      duration: "5 ph√∫t",
      description: "K·ªπ thu·∫≠t th·ªü s√¢u gi√∫p gi·∫£m cƒÉng th·∫≥ng v√† ƒëau b·ª•ng kinh",
      icon: "üßò‚Äç‚ôÄÔ∏è",
      category: "Th∆∞ gi√£n",
      steps: [
        "Ng·ªìi ho·∫∑c n·∫±m ·ªü t∆∞ th·∫ø tho·∫£i m√°i",
        "ƒê·∫∑t m·ªôt tay l√™n ng·ª±c, m·ªôt tay l√™n b·ª•ng",
        "H√≠t th·ªü ch·∫≠m qua m≈©i trong 4 gi√¢y",
        "Gi·ªØ h∆°i th·ªü trong 4 gi√¢y",
        "Th·ªü ra ch·∫≠m qua mi·ªáng trong 6 gi√¢y",
        "L·∫∑p l·∫°i 10-15 l·∫ßn",
      ],
    ),
    Exercise(
      id: 2,
      title: "Massage b·ª•ng nh·∫π nh√†ng",
      duration: "10 ph√∫t",
      description: "Massage v√πng b·ª•ng gi√∫p gi·∫£m co th·∫Øt v√† ƒëau b·ª•ng",
      icon: "üíÜ‚Äç‚ôÄÔ∏è",
      category: "Massage",
      steps: [
        "N·∫±m ng·ª≠a, g·ªëi h∆°i cong",
        "D√πng ƒë·∫ßu ng√≥n tay massage nh·∫π nh√†ng theo chi·ªÅu kim ƒë·ªìng h·ªì",
        "B·∫Øt ƒë·∫ßu t·ª´ r·ªën, t·ª´ t·ª´ m·ªü r·ªông ra",
        "√Åp d·ª•ng √°p l·ª±c nh·∫π, tho·∫£i m√°i",
        "Massage trong 2-3 ph√∫t m·ªói khu v·ª±c",
        "C√≥ th·ªÉ s·ª≠ d·ª•ng tinh d·∫ßu lavender ƒë·ªÉ th∆∞ gi√£n",
      ],
    ),
    Exercise(
      id: 3,
      title: "T∆∞ th·∫ø m√®o - b√≤",
      duration: "8 ph√∫t",
      description: "B√†i t·∫≠p yoga gi√∫p gi·∫£m ƒëau l∆∞ng v√† b·ª•ng d∆∞·ªõi",
      icon: "üê±",
      category: "Yoga",
      steps: [
        "Qu·ª≥ g·ªëi, hai tay ch·ªëng ƒë·∫•t",
        "Cong l∆∞ng l√™n nh∆∞ con m√®o, h·∫° ƒë·∫ßu",
        "Gi·ªØ trong 5 gi√¢y",
        "V√µng l∆∞ng xu·ªëng, ng·∫©ng ƒë·∫ßu l√™n",
        "Gi·ªØ trong 5 gi√¢y",
        "L·∫∑p l·∫°i 10-15 l·∫ßn ch·∫≠m r√£i",
      ],
    ),
    Exercise(
      id: 4,
      title: "T∆∞ th·∫ø em b√©",
      duration: "5 ph√∫t",
      description: "T∆∞ th·∫ø th∆∞ gi√£n gi√∫p gi·∫£m cƒÉng th·∫≥ng v√πng b·ª•ng",
      icon: "ü§±",
      category: "Yoga",
      steps: [
        "Qu·ª≥ g·ªëi tr√™n th·∫£m",
        "Ng·ªìi g√≥t ch√¢n, t√°ch ƒë·∫ßu g·ªëi r·ªông b·∫±ng h√¥ng",
        "C√∫i ng∆∞·ªùi v·ªÅ ph√≠a tr∆∞·ªõc, ƒë·∫∑t tr√°n xu·ªëng th·∫£m",
        "Du·ªói tay v·ªÅ ph√≠a tr∆∞·ªõc ho·∫∑c ƒë·ªÉ hai b√™n",
        "Th·ªü s√¢u v√† gi·ªØ t∆∞ th·∫ø 3-5 ph√∫t",
        "C·∫£m nh·∫≠n s·ª± th∆∞ gi√£n ·ªü l∆∞ng v√† b·ª•ng",
      ],
    ),
    Exercise(
      id: 5,
      title: "ƒêi b·ªô nh·∫π nh√†ng",
      duration: "15 ph√∫t",
      description: "V·∫≠n ƒë·ªông nh·∫π gi√∫p c·∫£i thi·ªán tu·∫ßn ho√†n v√† gi·∫£m ƒëau",
      icon: "üö∂‚Äç‚ôÄÔ∏è",
      category: "V·∫≠n ƒë·ªông",
      steps: [
        "Ch·ªçn ƒë·ªãa ƒëi·ªÉm y√™n tƒ©nh, kh√¥ng kh√≠ trong l√†nh",
        "ƒêi b·ªô v·ªõi nh·ªãp ƒë·ªô ch·∫≠m, tho·∫£i m√°i",
        "T·∫≠p trung v√†o h∆°i th·ªü ƒë·ªÅu ƒë·∫∑n",
        "L√†m c√°c ƒë·ªông t√°c du·ªói tay nh·∫π khi ƒëi",
        "Ngh·ªâ ng∆°i khi c·∫ßn thi·∫øt",
        "K·∫øt th√∫c v·ªõi 2-3 ph√∫t du·ªói c∆° nh·∫π",
      ],
    ),
    Exercise(
      id: 6,
      title: "Ch∆∞·ªùm ·∫•m",
      duration: "20 ph√∫t",
      description: "Nhi·ªát ƒë·ªô ·∫•m gi√∫p gi√£n c∆° v√† gi·∫£m ƒëau hi·ªáu qu·∫£",
      icon: "üî•",
      category: "Tr·ªã li·ªáu",
      steps: [
        "Chu·∫©n b·ªã t√∫i ch∆∞·ªùm n√≥ng ho·∫∑c khƒÉn ·∫•m",
        "Ki·ªÉm tra nhi·ªát ƒë·ªô v·ª´a ph·∫£i (kh√¥ng qu√° n√≥ng)",
        "ƒê·∫∑t l√™n v√πng b·ª•ng d∆∞·ªõi ho·∫∑c l∆∞ng",
        "N·∫±m th∆∞ gi√£n trong 15-20 ph√∫t",
        "C√≥ th·ªÉ k·∫øt h·ª£p v·ªõi nh·∫°c nh·∫π nh√†ng",
        "U·ªëng n∆∞·ªõc ·∫•m ƒë·ªÉ tƒÉng hi·ªáu qu·∫£",
      ],
    ),
  ];

  List<Exercise> get filteredExercises {
    if (selectedCategory == "T·∫•t c·∫£") {
      return exercises;
    }
    return exercises
        .where((exercise) => exercise.category == selectedCategory)
        .toList();
  }

  void toggleComplete(int exerciseId) {
    setState(() {
      completedExercises[exerciseId] =
          !(completedExercises[exerciseId] ?? false);
    });
  }

  void startExercise(Exercise exercise) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ExerciseDetailView(
          exercise: exercise,
          isCompleted: completedExercises[exercise.id] ?? false,
          onToggleComplete: () => toggleComplete(exercise.id),
        ),
      ),
    );
  }

  double get progressPercentage {
    int completedCount = completedExercises.values
        .where((completed) => completed)
        .length;
    return completedCount / exercises.length;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [TColor.lightGray, TColor.softPink.withOpacity(0.3)],
          ),
        ),
        child: Column(
          children: [
            // Header
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.centerLeft,
                  end: Alignment.centerRight,
                  colors: [TColor.rosePink, TColor.coral],
                ),
              ),
              child: SafeArea(
                bottom: false,
                child: Padding(
                  padding: const EdgeInsets.all(24.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.favorite, color: TColor.white, size: 28),
                          const SizedBox(width: 12),
                          Text(
                            "ChƒÉm s√≥c b·∫£n th√¢n",
                            style: TextStyle(
                              color: TColor.white,
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        "C√°c b√†i t·∫≠p gi·∫£m ƒëau k·ª≥ kinh nguy·ªát t·ª± nhi√™n v√† hi·ªáu qu·∫£",
                        style: TextStyle(
                          color: TColor.white.withOpacity(0.8),
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),

            // Content
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    // Category Filter
                    Container(
                      height: 40,
                      margin: const EdgeInsets.only(bottom: 24),
                      child: ListView.builder(
                        scrollDirection: Axis.horizontal,
                        itemCount: categories.length,
                        itemBuilder: (context, index) {
                          final category = categories[index];
                          final isSelected = selectedCategory == category;
                          return Container(
                            margin: const EdgeInsets.only(right: 8),
                            child: ElevatedButton(
                              onPressed: () {
                                setState(() {
                                  selectedCategory = category;
                                });
                              },
                              style: ElevatedButton.styleFrom(
                                backgroundColor: isSelected
                                    ? TColor.rosePink
                                    : TColor.white,
                                foregroundColor: isSelected
                                    ? TColor.white
                                    : TColor.gray,
                                elevation: isSelected ? 2 : 0,
                                side: isSelected
                                    ? null
                                    : BorderSide(
                                        color: TColor.gray.withOpacity(0.3),
                                      ),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(20),
                                ),
                              ),
                              child: Text(category),
                            ),
                          );
                        },
                      ),
                    ),

                    // Progress Card
                    Container(
                      width: double.infinity,
                      margin: const EdgeInsets.only(bottom: 24),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: TColor.white,
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: TColor.black.withOpacity(0.05),
                            blurRadius: 10,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                "Ti·∫øn ƒë·ªô h√¥m nay",
                                style: TextStyle(
                                  fontWeight: FontWeight.w600,
                                  color: TColor.black,
                                ),
                              ),
                              Text(
                                "${completedExercises.values.where((completed) => completed).length}/${exercises.length}",
                                style: TextStyle(
                                  color: TColor.gray,
                                  fontSize: 14,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          LinearProgressIndicator(
                            value: progressPercentage,
                            backgroundColor: TColor.lightGray,
                            valueColor: AlwaysStoppedAnimation<Color>(
                              TColor.rosePink,
                            ),
                            minHeight: 8,
                            borderRadius: BorderRadius.circular(4),
                          ),
                        ],
                      ),
                    ),

                    // Exercise List
                    ...filteredExercises
                        .map(
                          (exercise) => ExerciseCard(
                            exercise: exercise,
                            isCompleted:
                                completedExercises[exercise.id] ?? false,
                            onStart: () => startExercise(exercise),
                          ),
                        )
                        .toList(),

                    // Bottom Tip
                    Container(
                      width: double.infinity,
                      margin: const EdgeInsets.only(top: 32),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.centerLeft,
                          end: Alignment.centerRight,
                          colors: [
                            TColor.softPink.withOpacity(0.3),
                            TColor.blushPink.withOpacity(0.3),
                          ],
                        ),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("üí°", style: TextStyle(fontSize: 24)),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "L·ªùi khuy√™n",
                                  style: TextStyle(
                                    fontWeight: FontWeight.w600,
                                    color: TColor.black,
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  "Th·ª±c hi·ªán ƒë·ªÅu ƒë·∫∑n c√°c b√†i t·∫≠p n√†y s·∫Ω gi√∫p gi·∫£m ƒë√°ng k·ªÉ c∆°n ƒëau kinh nguy·ªát. H√£y l·∫Øng nghe c∆° th·ªÉ v√† d·ª´ng l·∫°i khi c·∫ßn thi·∫øt.",
                                  style: TextStyle(
                                    color: TColor.gray,
                                    fontSize: 14,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class ExerciseCard extends StatelessWidget {
  final Exercise exercise;
  final bool isCompleted;
  final VoidCallback onStart;

  const ExerciseCard({
    super.key,
    required this.exercise,
    required this.isCompleted,
    required this.onStart,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: TColor.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: TColor.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          // Icon
          Container(
            width: 48,
            height: 48,
            decoration: BoxDecoration(
              color: TColor.softPink,
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(exercise.icon, style: const TextStyle(fontSize: 20)),
            ),
          ),
          const SizedBox(width: 16),

          // Content
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        exercise.title,
                        style: TextStyle(
                          fontWeight: FontWeight.w600,
                          color: TColor.black,
                        ),
                      ),
                    ),
                    if (isCompleted)
                      Icon(
                        Icons.check_circle,
                        color: Colors.green.shade500,
                        size: 20,
                      ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  exercise.description,
                  style: TextStyle(color: TColor.gray, fontSize: 14),
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.access_time, size: 12, color: TColor.gray),
                    const SizedBox(width: 4),
                    Text(
                      exercise.duration,
                      style: TextStyle(color: TColor.gray, fontSize: 12),
                    ),
                    const SizedBox(width: 16),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: TColor.blushPink.withOpacity(0.3),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        exercise.category,
                        style: TextStyle(color: TColor.rosePink, fontSize: 12),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: onStart,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: TColor.rosePink,
                      foregroundColor: TColor.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: const [
                        Icon(Icons.play_arrow, size: 16),
                        SizedBox(width: 4),
                        Text("B·∫Øt ƒë·∫ßu", style: TextStyle(fontSize: 14)),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class ExerciseDetailView extends StatelessWidget {
  final Exercise exercise;
  final bool isCompleted;
  final VoidCallback onToggleComplete;

  const ExerciseDetailView({
    super.key,
    required this.exercise,
    required this.isCompleted,
    required this.onToggleComplete,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [TColor.lightGray, TColor.softPink.withOpacity(0.3)],
          ),
        ),
        child: Column(
          children: [
            // Header
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.centerLeft,
                  end: Alignment.centerRight,
                  colors: [TColor.rosePink, TColor.coral],
                ),
              ),
              child: SafeArea(
                bottom: false,
                child: Padding(
                  padding: const EdgeInsets.all(24.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          InkWell(
                            onTap: () => Navigator.pop(context),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.arrow_back,
                                  color: TColor.white.withOpacity(0.7),
                                ),
                                const SizedBox(width: 8),
                                Text(
                                  "Quay l·∫°i",
                                  style: TextStyle(
                                    color: TColor.white.withOpacity(0.7),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Row(
                        children: [
                          Text(
                            exercise.icon,
                            style: const TextStyle(fontSize: 32),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  exercise.title,
                                  style: TextStyle(
                                    color: TColor.white,
                                    fontSize: 20,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Row(
                                  children: [
                                    Icon(
                                      Icons.access_time,
                                      color: TColor.white,
                                      size: 16,
                                    ),
                                    const SizedBox(width: 4),
                                    Text(
                                      exercise.duration,
                                      style: TextStyle(
                                        color: TColor.white,
                                        fontSize: 14,
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ),

            // Content
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(24.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      exercise.description,
                      style: TextStyle(color: TColor.gray, fontSize: 16),
                    ),
                    const SizedBox(height: 24),
                    Text(
                      "C√°c b∆∞·ªõc th·ª±c hi·ªán:",
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: TColor.black,
                        fontSize: 16,
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Steps
                    ...exercise.steps.asMap().entries.map((entry) {
                      int index = entry.key;
                      String step = entry.value;
                      return Container(
                        margin: const EdgeInsets.only(bottom: 12),
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: TColor.lightGray,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Container(
                              width: 24,
                              height: 24,
                              decoration: BoxDecoration(
                                color: TColor.rosePink,
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Center(
                                child: Text(
                                  "${index + 1}",
                                  style: TextStyle(
                                    color: TColor.white,
                                    fontSize: 12,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: Text(
                                step,
                                style: TextStyle(
                                  color: TColor.black,
                                  fontSize: 14,
                                  height: 1.5,
                                ),
                              ),
                            ),
                          ],
                        ),
                      );
                    }).toList(),

                    const SizedBox(height: 24),

                    // Complete Button
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: () {
                          onToggleComplete();
                          Navigator.pop(context);
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: isCompleted
                              ? Colors.green.shade500
                              : TColor.rosePink,
                          foregroundColor: TColor.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            if (isCompleted) ...[
                              const Icon(Icons.check_circle),
                              const SizedBox(width: 8),
                              const Text("ƒê√£ ho√†n th√†nh"),
                            ] else
                              const Text("ƒê√°nh d·∫•u ho√†n th√†nh"),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class Exercise {
  final int id;
  final String title;
  final String duration;
  final String description;
  final String icon;
  final String category;
  final List<String> steps;

  Exercise({
    required this.id,
    required this.title,
    required this.duration,
    required this.description,
    required this.icon,
    required this.category,
    required this.steps,
  });
}
