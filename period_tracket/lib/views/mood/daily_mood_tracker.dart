import 'package:flutter/material.dart';

class DailyMoodTracker extends StatefulWidget {
  final int currentCycleDay;
  final Function(Map<String, dynamic>) onMoodSaved;

  const DailyMoodTracker({
    Key? key,
    required this.currentCycleDay,
    required this.onMoodSaved,
  }) : super(key: key);

  @override
  State<DailyMoodTracker> createState() => _DailyMoodTrackerState();
}

class _DailyMoodTrackerState extends State<DailyMoodTracker> {
  // Selected items
  List<String> selectedMoods = [];
  List<String> selectedSymptoms = [];
  List<String> selectedDischarge = [];
  List<String> selectedSexualActivity = [];
  List<String> selectedOvulationTest = [];
  List<String> selectedPhysicalActivity = [];
  List<String> selectedDigestion = [];
  List<String> selectedPregnancyTest = [];
  List<String> selectedOther = [];

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        children: [
          // Header
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(20),
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                IconButton(
                  onPressed: () => Navigator.of(context).pop(),
                  icon: const Icon(Icons.close, size: 24),
                ),
                const Text(
                  'H√¥m nay',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(width: 48), // Placeholder for symmetry
              ],
            ),
          ),

          // Content
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              children: [
                const SizedBox(height: 16),

                // Cycle day info
                Text(
                  'Ng√†y chu k·ª≥ ${widget.currentCycleDay}',
                  textAlign: TextAlign.center,
                  style: const TextStyle(fontSize: 14, color: Colors.grey),
                ),
                const SizedBox(height: 24),

                // Search bar
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 12,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                    borderRadius: BorderRadius.circular(25),
                  ),
                  child: const Row(
                    children: [
                      Icon(Icons.search, color: Colors.grey),
                      SizedBox(width: 8),
                      Text('T√¨m ki·∫øm', style: TextStyle(color: Colors.grey)),
                    ],
                  ),
                ),
                const SizedBox(height: 24),

                // How do you feel today section
                _buildSection(
                  title: 'H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?',
                  items: [
                    {
                      'icon': 'ü•ö',
                      'label': 'Nh∆∞ l√≤ng tr·∫Øng tr·ª©ng',
                      'color': Colors.purple[100]!,
                    },
                    {
                      'icon': 'üòä',
                      'label': 'B√¨nh tƒ©nh',
                      'color': Colors.orange[100]!,
                    },
                    {
                      'icon': 'üíß',
                      'label': 'Tr·∫Øng ƒë·ª•c',
                      'color': Colors.purple[100]!,
                    },
                    {
                      'icon': 'üçî',
                      'label': 'Th√®m ƒÉn',
                      'color': Colors.brown[100]!,
                    },
                  ],
                  selectedItems: selectedMoods,
                  onItemSelected: (item) {
                    setState(() {
                      if (selectedMoods.contains(item)) {
                        selectedMoods.remove(item);
                      } else {
                        selectedMoods.add(item);
                      }
                    });
                  },
                ),

                const SizedBox(height: 24),

                // Categories section
                _buildCategoriesSection(),

                const SizedBox(height: 24),

                // Save button
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () {
                      final moodData = {
                        'moods': selectedMoods,
                        'symptoms': selectedSymptoms,
                        'discharge': selectedDischarge,
                        'sexualActivity': selectedSexualActivity,
                        'ovulationTest': selectedOvulationTest,
                        'physicalActivity': selectedPhysicalActivity,
                        'digestion': selectedDigestion,
                        'pregnancyTest': selectedPregnancyTest,
                        'other': selectedOther,
                      };
                      widget.onMoodSaved(moodData);
                      Navigator.of(context).pop();
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF26C6DA),
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(25),
                      ),
                    ),
                    child: const Text(
                      'L∆∞u',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 32),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoriesSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Danh m·ª•c',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            TextButton(
              onPressed: () {},
              child: const Text(
                'Ch·ªânh s·ª≠a',
                style: TextStyle(color: Colors.blue),
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),

        // Ovulation test
        _buildSection(
          title: 'Th·ª≠ r·ª•ng tr·ª©ng',
          subtitle: 'Ghi l·∫°i ƒë·ªÉ bi·∫øt th·ªùi ƒëi·ªÉm r·ª•ng tr·ª©ng',
          items: [
            {'icon': '‚ÜîÔ∏è', 'label': 'ƒê√£ kh√¥ng th·ª≠', 'color': Colors.teal[100]!},
            {
              'icon': '‚ÜîÔ∏è',
              'label': 'K·∫øt qu·∫£: c√≥ thai',
              'color': Colors.teal[100]!,
            },
            {
              'icon': '‚ÜîÔ∏è',
              'label': 'K·∫øt qu·∫£: kh√¥ng c√≥ thai',
              'color': Colors.teal[100]!,
            },
            {
              'icon': '‚ÜîÔ∏è',
              'label': 'R·ª•ng tr·ª©ng: t·ª± t√≠nh to√°n',
              'color': Colors.teal[100]!,
            },
          ],
          selectedItems: selectedOvulationTest,
          onItemSelected: (item) {
            setState(() {
              if (selectedOvulationTest.contains(item)) {
                selectedOvulationTest.remove(item);
              } else {
                selectedOvulationTest.add(item);
              }
            });
          },
        ),

        const SizedBox(height: 24),

        // Sexual activity
        _buildSection(
          title: 'Ho·∫°t ƒë·ªông t√¨nh d·ª•c v√† nhu c·∫ßu t√¨nh d·ª•c',
          items: [
            {
              'icon': '‚ù§Ô∏è',
              'label': 'Kh√¥ng quan h·ªá t√¨nh d·ª•c',
              'color': Colors.red[100]!,
            },
            {
              'icon': 'üîí',
              'label': 'Quan h·ªá t√¨nh d·ª•c c√≥ b·∫£o v·ªá',
              'color': Colors.red[100]!,
            },
            {
              'icon': 'üîì',
              'label': 'Quan h·ªá t√¨nh d·ª•c kh√¥ng b·∫£o v·ªá',
              'color': Colors.red[100]!,
            },
          ],
          selectedItems: selectedSexualActivity,
          onItemSelected: (item) {
            setState(() {
              if (selectedSexualActivity.contains(item)) {
                selectedSexualActivity.remove(item);
              } else {
                selectedSexualActivity.add(item);
              }
            });
          },
        ),

        const SizedBox(height: 24),

        // Mood section
        _buildSection(
          title: 'T√¢m tr·∫°ng',
          items: [
            {'icon': 'üòä', 'label': 'B√¨nh tƒ©nh', 'color': Colors.orange[100]!},
            {'icon': 'üòÑ', 'label': 'Vui v·∫ª', 'color': Colors.orange[100]!},
            {'icon': '‚ö°', 'label': 'M·∫°nh m·∫Ω', 'color': Colors.orange[100]!},
            {'icon': 'üòÅ', 'label': 'Ph·∫•n ch·∫•n', 'color': Colors.orange[100]!},
            {
              'icon': 'üòî',
              'label': 'Th·∫•t th∆∞·ªùng',
              'color': Colors.orange[100]!,
            },
            {'icon': 'üò†', 'label': 'B·ª±c b·ªôi', 'color': Colors.orange[100]!},
            {'icon': 'üòû', 'label': 'Bu·ªìn', 'color': Colors.orange[100]!},
            {'icon': 'üòü', 'label': 'Lo l·∫Øng', 'color': Colors.orange[100]!},
            {'icon': 'üò©', 'label': 'Tr·∫ßm c·∫£m', 'color': Colors.orange[100]!},
            {
              'icon': 'üò•',
              'label': 'C·∫£m th·∫•y c√≥ l·ªói',
              'color': Colors.orange[100]!,
            },
            {
              'icon': '‚òÅÔ∏è',
              'label': 'Suy nghƒ© √°m ·∫£nh',
              'color': Colors.orange[100]!,
            },
            {
              'icon': 'üò¥',
              'label': 'Thi·∫øu nƒÉng l∆∞·ª£ng',
              'color': Colors.orange[100]!,
            },
            {'icon': 'üòê', 'label': 'L√£nh ƒë·∫°m', 'color': Colors.orange[100]!},
            {'icon': 'üòï', 'label': 'B·ªëi r·ªëi', 'color': Colors.orange[100]!},
            {
              'icon': 'üò°',
              'label': 'R·∫•t hay t·ª± tr√°ch m√¨nh',
              'color': Colors.orange[100]!,
            },
          ],
          selectedItems: selectedMoods,
          onItemSelected: (item) {
            setState(() {
              if (selectedMoods.contains(item)) {
                selectedMoods.remove(item);
              } else {
                selectedMoods.add(item);
              }
            });
          },
        ),

        const SizedBox(height: 24),

        // Symptoms section
        _buildSection(
          title: 'Tri·ªáu ch·ª©ng',
          items: [
            {
              'icon': 'üëç',
              'label': 'M·ªçi th·ª© ƒë·ªÅu ·ªïn',
              'color': Colors.pink[100]!,
            },
            {'icon': 'ü§∞', 'label': 'Chu·ªôt r√∫t', 'color': Colors.pink[100]!},
            {
              'icon': 'üëô',
              'label': 'S∆∞ng ƒëau ng·ª±c',
              'color': Colors.pink[100]!,
            },
            {'icon': 'ü§ï', 'label': 'ƒêau ƒë·∫ßu', 'color': Colors.pink[100]!},
            {'icon': 'üò∑', 'label': 'M·ª•n', 'color': Colors.pink[100]!},
            {'icon': 'ü¶¥', 'label': 'ƒêau l∆∞ng', 'color': Colors.pink[100]!},
            {'icon': 'üîã', 'label': 'M·ªát m·ªèi', 'color': Colors.pink[100]!},
            {'icon': 'üçî', 'label': 'Th√®m ƒÉn', 'color': Colors.pink[100]!},
            {'icon': 'üåô', 'label': 'M·∫•t ng·ªß', 'color': Colors.purple[100]!},
            {'icon': 'ü§∞', 'label': 'ƒêau b·ª•ng', 'color': Colors.pink[100]!},
            {
              'icon': 'üå∏',
              'label': 'Ng·ª©a √¢m ƒë·∫°o',
              'color': Colors.purple[100]!,
            },
            {'icon': 'üíß', 'label': 'Kh√¥ √¢m ƒë·∫°o', 'color': Colors.purple[100]!},
          ],
          selectedItems: selectedSymptoms,
          onItemSelected: (item) {
            setState(() {
              if (selectedSymptoms.contains(item)) {
                selectedSymptoms.remove(item);
              } else {
                selectedSymptoms.add(item);
              }
            });
          },
        ),

        const SizedBox(height: 24),

        // Vaginal discharge section
        _buildSection(
          title: 'Ti·∫øt d·ªãch √¢m ƒë·∫°o',
          items: [
            {
              'icon': '‚ùå',
              'label': 'Kh√¥ng c√≥ d·ªãch',
              'color': Colors.purple[100]!,
            },
            {'icon': 'üíß', 'label': 'Tr·∫Øng ƒë·ª•c', 'color': Colors.purple[100]!},
            {'icon': 'üíß', 'label': '·∫®m ∆∞·ªõt', 'color': Colors.purple[100]!},
            {'icon': 'üíß', 'label': 'D·∫°ng d√≠nh', 'color': Colors.purple[100]!},
            {
              'icon': 'ü•ö',
              'label': 'Nh∆∞ l√≤ng tr·∫Øng tr·ª©ng',
              'color': Colors.purple[100]!,
            },
            {'icon': 'ü©∏', 'label': 'D·∫°ng ƒë·ªëm', 'color': Colors.purple[100]!},
            {'icon': '‚ö†Ô∏è', 'label': 'B·∫•t th∆∞·ªùng', 'color': Colors.purple[100]!},
            {
              'icon': 'üîò',
              'label': 'Tr·∫Øng, v√≥n c·ª•c',
              'color': Colors.purple[100]!,
            },
            {'icon': 'üîò', 'label': 'X√°m', 'color': Colors.purple[100]!},
          ],
          selectedItems: selectedDischarge,
          onItemSelected: (item) {
            setState(() {
              if (selectedDischarge.contains(item)) {
                selectedDischarge.remove(item);
              } else {
                selectedDischarge.add(item);
              }
            });
          },
        ),

        const SizedBox(height: 24),

        // Physical activity section
        _buildSection(
          title: 'Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t',
          items: [
            {'icon': '‚ùå', 'label': 'Kh√¥ng t·∫≠p', 'color': Colors.green[100]!},
            {'icon': 'üßò', 'label': 'Yoga', 'color': Colors.green[100]!},
            {'icon': 'üèãÔ∏è', 'label': 'Gym', 'color': Colors.green[100]!},
            {
              'icon': 'üíÉ',
              'label': 'Aerobic & nh·∫£y m√∫a',
              'color': Colors.green[100]!,
            },
            {'icon': 'üèä', 'label': 'B∆°i l·ªôi', 'color': Colors.green[100]!},
            {
              'icon': 'üèÄ',
              'label': 'Th·ªÉ thao ƒë·ªìng ƒë·ªôi',
              'color': Colors.green[100]!,
            },
            {'icon': 'üèÉ', 'label': 'Ch·∫°y', 'color': Colors.green[100]!},
            {'icon': 'üö¥', 'label': 'ƒê·∫°p xe ƒë·∫°p', 'color': Colors.green[100]!},
            {'icon': 'üö∂', 'label': 'ƒêi b·ªô', 'color': Colors.green[100]!},
          ],
          selectedItems: selectedPhysicalActivity,
          onItemSelected: (item) {
            setState(() {
              if (selectedPhysicalActivity.contains(item)) {
                selectedPhysicalActivity.remove(item);
              } else {
                selectedPhysicalActivity.add(item);
              }
            });
          },
        ),

        const SizedBox(height: 24),

        // Digestion section
        _buildSection(
          title: 'Ti√™u h√≥a v√† ch·∫•t th·∫£i',
          items: [
            {'icon': 'ü§¢', 'label': 'Bu·ªìn n√¥n', 'color': Colors.purple[100]!},
            {'icon': 'üéà', 'label': 'ƒê·∫ßy h∆°i', 'color': Colors.purple[100]!},
            {'icon': 'üîí', 'label': 'T√°o b√≥n', 'color': Colors.purple[100]!},
            {'icon': 'üßª', 'label': 'Ti√™u ch·∫£y', 'color': Colors.purple[100]!},
          ],
          selectedItems: selectedDigestion,
          onItemSelected: (item) {
            setState(() {
              if (selectedDigestion.contains(item)) {
                selectedDigestion.remove(item);
              } else {
                selectedDigestion.add(item);
              }
            });
          },
        ),

        const SizedBox(height: 24),

        // Pregnancy test section
        _buildSection(
          title: 'Th·ª≠ thai',
          items: [
            {
              'icon': '‚ÜîÔ∏è',
              'label': 'ƒê√£ kh√¥ng th·ª≠',
              'color': Colors.orange[100]!,
            },
            {'icon': '‚ÜîÔ∏è', 'label': 'C√≥ thai', 'color': Colors.orange[100]!},
            {
              'icon': '‚ÜîÔ∏è',
              'label': 'Kh√¥ng c√≥ thai',
              'color': Colors.orange[100]!,
            },
            {'icon': '‚ùì', 'label': 'Kh√¥ng ch·∫Øc', 'color': Colors.orange[100]!},
          ],
          selectedItems: selectedPregnancyTest,
          onItemSelected: (item) {
            setState(() {
              if (selectedPregnancyTest.contains(item)) {
                selectedPregnancyTest.remove(item);
              } else {
                selectedPregnancyTest.add(item);
              }
            });
          },
        ),

        const SizedBox(height: 24),

        // Other section
        _buildSection(
          title: 'Kh√°c',
          items: [
            {'icon': 'üìç', 'label': 'ƒêi l·∫°i', 'color': Colors.orange[100]!},
            {'icon': '‚ö°', 'label': 'CƒÉng th·∫≥ng', 'color': Colors.orange[100]!},
            {'icon': 'ü™∑', 'label': 'Thi·ªÅn', 'color': Colors.orange[100]!},
            {
              'icon': 'üìñ',
              'label': 'Vi·∫øt nh·∫≠t k√Ω',
              'color': Colors.orange[100]!,
            },
            {
              'icon': 'ü¶¥',
              'label': 'B√†i t·∫≠p Kegel',
              'color': Colors.orange[100]!,
            },
            {
              'icon': 'ü´Å',
              'label': 'B√†i t·∫≠p th·ªü',
              'color': Colors.orange[100]!,
            },
            {
              'icon': 'ü©π',
              'label': 'B·ªã b·ªánh hay b·ªã th∆∞∆°ng',
              'color': Colors.orange[100]!,
            },
            {'icon': 'üç∑', 'label': 'R∆∞·ª£u', 'color': Colors.orange[100]!},
          ],
          selectedItems: selectedOther,
          onItemSelected: (item) {
            setState(() {
              if (selectedOther.contains(item)) {
                selectedOther.remove(item);
              } else {
                selectedOther.add(item);
              }
            });
          },
        ),
      ],
    );
  }

  Widget _buildSection({
    required String title,
    String? subtitle,
    required List<Map<String, dynamic>> items,
    required List<String> selectedItems,
    required Function(String) onItemSelected,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          if (subtitle != null) ...[
            const SizedBox(height: 4),
            Text(
              subtitle,
              style: const TextStyle(fontSize: 12, color: Colors.grey),
            ),
          ],
          const SizedBox(height: 12),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: items.map((item) {
              final label = item['label'] as String;
              final isSelected = selectedItems.contains(label);

              return GestureDetector(
                onTap: () => onItemSelected(label),
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 8,
                  ),
                  decoration: BoxDecoration(
                    color: isSelected
                        ? item['color']
                        : item['color'].withOpacity(0.3),
                    borderRadius: BorderRadius.circular(20),
                    border: isSelected
                        ? Border.all(color: Colors.grey[400]!, width: 1)
                        : null,
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(item['icon'], style: const TextStyle(fontSize: 16)),
                      const SizedBox(width: 6),
                      Text(
                        label,
                        style: TextStyle(
                          fontSize: 12,
                          fontWeight: isSelected
                              ? FontWeight.w600
                              : FontWeight.normal,
                          color: Colors.black87,
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }).toList(),
          ),
        ],
      ),
    );
  }
}




